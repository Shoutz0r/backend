<?php

namespace App\Jobs;

use App\MediaSource\Base\ProcessorPipeline;
use App\MediaSource\Base\Processors\ProcessorError;
use App\MediaSource\MediaSourceManager;
use App\MediaSource\ProcessorItem;
use App\Models\Media;
use App\Models\Upload;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\Middleware\WithoutOverlapping;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Throwable;

class MediaInfoAgent implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected Upload $upload;

    /**
     * The number of times the job may be attempted.
     *
     * @var int
     */
    public int $tries = 1;

    /**
     * The number of seconds to wait before retrying the job.
     *
     * @var int
     */
    public int $backoff = 60;

    /**
     * Get the middleware the job should pass through.
     *
     * @return array
     */
    public function middleware()
    {
        return [
            /*
             * We don't want to release any new queued jobs since this job
             * can take quite a while depending on how much media there is.
             * Instead, a @TODO is to check if the job is still locked, and
             * allow an administrator to kill the current job and re-start it.
             */
            (new WithoutOverlapping(1))->dontRelease()
        ];
    }

    /**
     * Create a new job instance
     */
    public function __construct()
    { }

    /**
     * Execute the job.
     *
     * @return void
     * @throws Throwable
     */
    public function handle()
    {
        Log::debug("Started media info agent");

        try {
            // Start processing the upload
            (new ProcessorPipeline(app()))
                ->send(new ProcessorItem(
                    $this->upload,
                    $this->createBaseMediaObject($this->upload)
                ))
                ->through([
                    // @TODO get this array of agent from a provider
                ])
                // Error caught while processing
                ->onError(function (ProcessorError $error) {
                    // Perform a DB rollback first
                    DB::rollBack();

                    // Get the exception from the error (if any)
                    $exception = $error->getException();

                    // Check if an exception was returned
                    if ($exception !== null) {
                        Log::critical("An exception occured while processing the job: " . $exception->getMessage());
                        error_log("An exception occured while processing the job: " . $exception->getMessage());
                    } else {
                        Log::info("An error returned while processing, error: " . $error->error);
                    }

                    // Upload Exists Exception has been thrown. Stop further processing of this job.
                    if ($error->rejected) {
                        Log::info("Upload is rejected, will not retry processing. Deleting upload");
                        // Delete the upload object
                        $this->upload->delete();
                    } // If the # of attempts has exceeded the allowed # of tries, Stop further processing of this job.
                    elseif ($this->attempts() >= $this->tries) {
                        Log::info("Number of processing tries exceeded. Marking upload as failed (final)");
                        $this->upload->status = Upload::STATUS_FAILED_FINAL;
                    }
                    // Update the status of the upload to failed_retry to indicate to the frontend that it has failed
                    // but will be re-attempted
                    else {
                        Log::info("Marking upload as failed (with retry)");
                        $this->upload->status = Upload::STATUS_FAILED_RETRY;
                    }

                    // If the upload wasn't rejected, update the upload status
                    if (!$error->rejected) {
                        // Save the status
                        $this->upload->save();
                        $this->release($this->backoff);
                    }
                })
                ->then(function (ProcessorItem $item) {
                    $upload = $item->getUpload();
                    $media = $item->getMedia();

                    // Check if the file needs to be moved once finished
                    if ($item->moveFileOnFinish()) {
                        Storage::move(
                            Upload::STORAGE_PATH . $upload->filename,
                            Media::STORAGE_PATH . $media->filename
                        );
                    }

                    // Save the media instance to the database
                    $media->save();

                    // Delete the upload from the database
                    $upload->delete();

                    // Commit all changes to the database
                    DB::commit();

                    Log::debug("Processing successfully finished");
                });
        }
        catch(Throwable $e) {
            DB::rollBack();
            throw $e;
        }
    }

    /**
     * Create the base media object for the uploaded file
     * This method only sets some default properties and does not do any saniziting or processing yet.
     * @param Upload $upload
     * @return Media
     */
    private function createBaseMediaObject(Upload $upload): Media
    {
        return new Media([
            'title' => '',
            'filename' => $upload->filename,
            'duration' => 0,
            'is_video' => false
        ]);
    }
}
