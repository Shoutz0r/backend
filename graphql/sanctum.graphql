type AccessToken {
    token: String!
}

"""
CUSTOMIZED for username / password authentication instead of email/password
"""
input LoginInput {
    username: String! @rules(apply: ["required", "alpha_num"])
    password: String! @rules(apply: ["required"])
}

"""
CUSTOMIZED to make use of username
"""
input ResendEmailVerificationInput {
    username: String! @rules(apply: ["required", "alpha_num"])
}

"""
CUSTOMIZED to make use of username
"""
input ForgotPasswordInput {
    username: String! @rules(apply: ["required", "alpha_num"])
}

"""
CUSTOMIZED to show if manual verification is required
"""
enum RegisterStatus {
    """MANUAL_APPROVE_REQUIRED"""
    MANUAL_APPROVE_REQUIRED

    """MUST_VERIFY_EMAIL"""
    MUST_VERIFY_EMAIL

    """SUCCESS"""
    SUCCESS
}

"""
CUSTOMIZED to require a username, email & password
"""
input RegisterInput {
    username: String! @rules(apply: ["bail", "required", "alpha_num", "unique:users,username"])
    email: String! @rules(apply: ["bail", "required", "email", "unique:users,email"])
    password: String! @rules(apply: ["bail", "required", "min:8", "confirmed"])
    password_confirmation: String! @rules(apply: ["required"])
}

"""
CUSTOMIZED to require an email
"""
input ResetPasswordInput {
    email: String! @rules(apply: ["required", "email"])
    token: String!
    password: String! @rules(apply: ["confirmed"])
    password_confirmation: String!
}

type LogoutResponse {
    status: LogoutStatus!
    message: String!
}

enum LogoutStatus {
    """TOKEN_REVOKED"""
    TOKEN_REVOKED
}

type RegisterResponse {
    token: String
    status: RegisterStatus!
}

type EmailVerificationResponse {
    status: EmailVerificationStatus!
}

enum EmailVerificationStatus {
    """VERIFIED"""
    VERIFIED
}

type ResendEmailVerificationResponse {
    status: ResendEmailVerificationStatus!
}

enum ResendEmailVerificationStatus {
    """EMAIL_SENT"""
    EMAIL_SENT
}

input VerifyEmailInput {
    id: ID!
    hash: String!
    expires: Int
    signature: String
}

"""
The url used to verify the email address.
Use __ID__ and __HASH__ to inject values.

e.g; `https://my-front-end.com/verify-email?id=__ID__&hash=__HASH__`

If the API uses signed email verification urls
you must also use __EXPIRES__ and __SIGNATURE__

e.g; `https://my-front-end.com/verify-email?id=__ID__&hash=__HASH__&expires=__EXPIRES__&signature=__SIGNATURE__`
"""
input VerificationUrlInput {
    url: String! @rules(apply: ["url"])
}

"""
The url used to reset the password.
Use the `__EMAIL__` and `__TOKEN__` placeholders to inject the reset password email and token.

e.g; `https://my-front-end.com?reset-password?email=__EMAIL__&token=__TOKEN__`
"""
input ResetPasswordUrlInput {
    url: String! @rules(apply: ["url"])
}

type ForgotPasswordResponse {
    status: ForgotPasswordStatus!
    message: String
}

enum ForgotPasswordStatus {
    """EMAIL_SENT"""
    EMAIL_SENT
}

type ResetPasswordResponse {
    status: ResetPasswordStatus!
    message: String
}

enum ResetPasswordStatus {
    """PASSWORD_RESET"""
    PASSWORD_RESET
}

input UpdatePasswordInput {
    current_password: String!
    password: String! @rules(apply: ["confirmed"])
    password_confirmation: String!
}

type UpdatePasswordResponse {
    status: UpdatePasswordStatus!
}

enum UpdatePasswordStatus {
    """PASSWORD_UPDATED"""
    PASSWORD_UPDATED
}

extend type Mutation {
    login(input: LoginInput @spread): AccessToken!
        @field(resolver: "App\\GraphQL\\Mutations\\Login")
    logout: LogoutResponse! @guard
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\Logout")
    register(input: RegisterInput @spread): RegisterResponse!
        @field(resolver: "App\\GraphQL\\Mutations\\Register")
    verifyEmail(input: VerifyEmailInput! @spread): EmailVerificationResponse!
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\VerifyEmail")
    resendEmailVerification(input: ResendEmailVerificationInput! @spread): ResendEmailVerificationResponse!
        @field(resolver: "App\\GraphQL\\Mutations\\ResendEmailVerification")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse!
        @field(resolver: "App\\GraphQL\\Mutations\\ForgotPassword")
    resetPassword(input: ResetPasswordInput! @spread): ResetPasswordResponse!
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\ResetPassword")
    updatePassword(input: UpdatePasswordInput! @spread): UpdatePasswordResponse! @guard
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\UpdatePassword")
}
